const fs = require('fs-extra')
const path = require('path')

const traverseDirectory = require('./traverseDirectory')
const diffFolderStructure = require('./diffFolderStructure')
const generatePatches = require('./generatePatches')
const { copyToFolder, doPatch, convertPathSeparatorToUnderscore } = require('./utils')

/**
 * @typedef {Object.<string, { filename: string; md5: string; size: number }>} FileInfo
 */

/**
 * @typedef {Object} DiffInfo
 * @property {FileInfo} added
 * @property {FileInfo} deleted
 * @property {FileInfo} modified
 * @property {FileInfo} unchanged
 */

/**
 * Description
 * @param {string} folderOfA path of folderOfA
 * @param {string} folderOfB path of folderOfB
 * @param {string} folderOfPatches path of patchPackage
 */
async function generatePatchPackage({ folderOfA, folderOfB, folderOfPatches, doDiffThreshold = 1024 * 500 }) {
  /** @type {FileInfo} */
  const folderOfAFileInfo = await traverseDirectory(folderOfA)
  /** @type {FileInfo} */
  const folderOfBFileInfo = await traverseDirectory(folderOfB)
  /** @type {DiffInfo} */
  const diffJson = diffFolderStructure(folderOfAFileInfo, folderOfBFileInfo)

  const diffJsonPath = path.join(folderOfPatches, 'diff.json')

  await fs.ensureDir(folderOfPatches)
  await fs.emptyDir(folderOfPatches)
  await fs.writeFile(diffJsonPath, JSON.stringify(diffJson, null, 2), 'utf-8')

  const { added, modified } = diffJson
  // copy all added files into folderOfPatches
  Object.keys(added).forEach(async (filePath) => {
    await copyToFolder(folderOfB, filePath, path.join(folderOfPatches, 'new_version'))
  })

  // copy all modified files which is smaller than doDiffThreshold into folderOfPatches
  Object.keys(modified).forEach(async (filePath) => {
    if (modified[filePath].size > doDiffThreshold) return
    await copyToFolder(folderOfB, filePath, path.join(folderOfPatches, 'new_version'))
  })

  await generatePatches({
    folderOfA,
    folderOfB,
    diffJson,
    doDiffThreshold,
    folderOfPatches,
  })
}

/**
 * Description
 * @param {any} folderOfA
 * @param {any} folderOfPatches
 * @param {any} folderNew
 */
async function generateNewVersionPackage({ folderOfA, folderOfPatches, folderNew }) {
  // 1. init folderNew folder
  fs.removeSync(folderNew)
  fs.mkdirSync(folderNew)

  // 2. copy all unchanged files into folderNew folder
  const diffJson = JSON.parse(fs.readFileSync(path.join(folderOfPatches, 'diff.json')))
  const { unchanged, modified } = diffJson
  
  Object.keys(unchanged).forEach(filePath => {
    copyToFolder(folderOfA, filePath, folderNew)
  })

  // 3. use bsdiff to patch files, or just copy to folderNew
  const doPatchPromises = []

  Object.keys(modified).forEach(filePath => {
    const patchFileName = `${convertPathSeparatorToUnderscore(filePath)}.patch`
    const existsPatchFiles = fs.readdirSync(folderOfPatches)
    // These files should be generated by bsdiff.patch
    if (existsPatchFiles.includes(patchFileName)) {
      const originFilePath = path.join(folderOfA, filePath)
      const newFilePath = path.join(folderNew, filePath)
      
      fs.ensureDirSync(path.dirname(newFilePath))
      const doPatchPromise = doPatch(originFilePath, newFilePath, path.join(folderOfPatches, patchFileName))
      doPatchPromises.push(doPatchPromise)
    }
  })

  console.time('\nFinish all patch operation')
  const res = await Promise.all(doPatchPromises)
  console.timeEnd('\nFinish all patch operation')

  await fs.copy(path.join(folderOfPatches, 'new_version'), folderNew)

  return res
}

exports.generatePatchPackage = generatePatchPackage
exports.generateNewVersionPackage = generateNewVersionPackage
